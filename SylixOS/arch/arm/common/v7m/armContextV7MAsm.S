;/*********************************************************************************************************
;**
;**                                    中国软件开源组织
;**
;**                                   嵌入式实时操作系统
;**
;**                                       SylixOS(TM)
;**
;**                               Copyright  All Rights Reserved
;**
;**--------------文件信息--------------------------------------------------------------------------------
;**
;** 文   件   名: armContextV7MAsm.S
;**
;** 创   建   人: Jiao.JinXing (焦进星)
;**
;** 文件创建日期: 2017 年 11 月 14 日
;**
;** 描        述: ARMv7M 体系构架上下文切换.
;*********************************************************************************************************/

#ifndef ASSEMBLY
#define ASSEMBLY 1
#endif

#include <arch/assembler.h>
#include <config/kernel/kernel_cfg.h>
#include <config/mp/mp_cfg.h>

#if defined(__SYLIXOS_ARM_ARCH_M__)

#include "armSvcV7M.h"

    FILE_BEGIN()

;/*********************************************************************************************************
;  ARMv7M 体系构架相关上下文切换函数
;*********************************************************************************************************/

    IMPORT_LABEL(_SchedSwp)
#if LW_CFG_SMP_EN > 0
    IMPORT_LABEL(_SchedSafeStack)
#endif
#if LW_CFG_COROUTINE_EN > 0
    IMPORT_LABEL(_SchedCrSwp)
#endif

    EXPORT_LABEL(archTaskCtxStart)
    EXPORT_LABEL(archTaskCtxSwitch)
#if LW_CFG_COROUTINE_EN > 0
    EXPORT_LABEL(archCrtCtxSwitch)
#endif
    EXPORT_LABEL(archIntCtxLoad)
    EXPORT_LABEL(archSigCtxLoad)

;/*********************************************************************************************************
;  当前 CPU 开始运行多任务执行
;  参数为当前 CPU 控制块, 即 R0 为当前 CPU 控制块指针
;*********************************************************************************************************/

FUNC_DEF(archTaskCtxStart)
    MOV     R1 , #LW_CFG_CORTEX_M_INT_MASK
    MSR     BASEPRI, R1                                         ;/*  屏蔽除 SVC 外的中断                 */
    MOV     R1 , #SVC_archTaskCtxStart                          ;/*  使用 R1 传递 SVC 命令号             */
    CPSIE   I                                                   ;/*  使能中断                            */
    SVC     0
    BX      LR
    FUNC_END()

;/*********************************************************************************************************
;  线程切换
;  参数为当前 CPU 控制块, 即 R0 为当前 CPU 控制块指针
;*********************************************************************************************************/

FUNC_DEF(archTaskCtxSwitch)
    MOV     R1 , #SVC_archTaskCtxSwitch                         ;/*  使用 R1 传递 SVC 命令号             */
    SVC     0
    BX      LR
    FUNC_END()

;/*********************************************************************************************************
;  协程切换
;  参数为当前 CPU 控制块, 即 R0 为当前 CPU 控制块指针
;*********************************************************************************************************/

#if LW_CFG_COROUTINE_EN > 0
FUNC_DEF(archCrtCtxSwitch)
    MOV     R1 , #SVC_archCrtCtxSwitch                          ;/*  使用 R1 传递 SVC 命令号             */
    SVC     0
    BX      LR
    FUNC_END()
#endif

;/*********************************************************************************************************
;  中断返回时, 线程装载
;  参数为当前 CPU 控制块, 即 R0 为当前 CPU 控制块指针
;*********************************************************************************************************/

FUNC_DEF(archIntCtxLoad)
    LDR     R1 , [R0]                                           ;/*  R0 = stack current                  */
    LDR     R0 , [R1]

    ;/*
    ; *  恢复 R3-11, R14 寄存器
    ; */
    LDM     R0 , {R3-R11, LR}
    ADDS    R0 , R0, #0x28

    TST     LR , #0x04                                          ;/*  nonzero if context on process stack */
    ITE     EQ                                                  ;/*  next two instructions conditional   */
    MSREQ   MSP, R0
    MSRNE   PSP, R0

    MSR     BASEPRI , R3

    BX      LR
    FUNC_END()

;/*********************************************************************************************************
;  信号上下文返回
;  参数为需要返回的堆栈栈顶位置
;*********************************************************************************************************/

FUNC_DEF(archSigCtxLoad)
    MOV     R1 , #SVC_archSigCtxLoad                            ;/*  使用 R1 传递 SVC 命令号             */
    SVC     0
    BX      LR
    FUNC_END()

    FILE_END()

#endif
;/*********************************************************************************************************
;  END
;*********************************************************************************************************/
